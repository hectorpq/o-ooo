// lib/auth/auth_service.dart
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';

class AuthService extends ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  bool _isLoading = true;
  String? _errorMessage;

  AuthService() {
    _initialize();
  }

  // Inicializaci√≥n del servicio
  void _initialize() {
    // Escuchar cambios de estado de autenticaci√≥n
    _auth.authStateChanges().listen((User? user) {
      _isLoading = false;
      _clearError(); // Limpiar errores cuando cambia el estado
      notifyListeners();

      // Log para debugging (similar al patr√≥n usado en main.dart)
      if (user != null) {
        print('‚úÖ Usuario autenticado: ${user.email}');
      } else {
        print('‚ùå Usuario no autenticado');
      }
    });
  }

  // GETTERS para el AuthWrapper y otras pantallas
  bool get isLoading => _isLoading;
  bool get isAuthenticated => _auth.currentUser != null;
  String? get errorMessage => _errorMessage;

  // Obtener usuario actual
  User? get currentUser => _auth.currentUser;

  // Obtener email del usuario actual
  String? get currentUserEmail => _auth.currentUser?.email;

  // Verificar si el email est√° verificado
  bool get isEmailVerified => _auth.currentUser?.emailVerified ?? false;

  // Stream de cambios de estado de autenticaci√≥n
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  // Stream de cambios de usuario
  Stream<User?> get userChanges => _auth.userChanges();

  // Limpiar mensajes de error
  void _clearError() {
    if (_errorMessage != null) {
      _errorMessage = null;
      notifyListeners();
    }
  }

  // M√©todo helper para manejar errores de Firebase
  String _getFirebaseErrorMessage(String errorCode) {
    switch (errorCode) {
      case 'weak-password':
        return 'La contrase√±a es demasiado d√©bil';
      case 'email-already-in-use':
        return 'Ya existe una cuenta con este email';
      case 'invalid-email':
        return 'El formato del email no es v√°lido';
      case 'user-not-found':
        return 'No existe usuario con este email';
      case 'wrong-password':
        return 'Contrase√±a incorrecta';
      case 'user-disabled':
        return 'Esta cuenta ha sido deshabilitada';
      case 'too-many-requests':
        return 'Demasiados intentos. Intenta m√°s tarde';
      case 'network-request-failed':
        return 'Error de conexi√≥n. Verifica tu internet';
      default:
        return 'Error de autenticaci√≥n: $errorCode';
    }
  }

  // Registrar usuario con email y password
  Future<User?> registerWithEmailPassword(String email, String password) async {
    try {
      _isLoading = true;
      _clearError();
      notifyListeners();

      print('üîÑ Intentando registrar usuario: $email');

      UserCredential result = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      print('‚úÖ Usuario registrado exitosamente: ${result.user?.email}');

      // Enviar verificaci√≥n de email autom√°ticamente
      await result.user?.sendEmailVerification();
      print('üìß Email de verificaci√≥n enviado');

      return result.user;
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error en registro: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al registrar usuario';
      print('‚ùå Error inesperado en registro: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Iniciar sesi√≥n
  Future<User?> signInWithEmailPassword(String email, String password) async {
    try {
      _isLoading = true;
      _clearError();
      notifyListeners();

      print('üîÑ Intentando iniciar sesi√≥n: $email');

      UserCredential result = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      print('‚úÖ Sesi√≥n iniciada exitosamente: ${result.user?.email}');
      return result.user;
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error en login: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al iniciar sesi√≥n';
      print('‚ùå Error inesperado en login: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Enviar email de recuperaci√≥n de contrase√±a
  Future<void> sendPasswordResetEmail(String email) async {
    try {
      _clearError();
      print('üîÑ Enviando email de recuperaci√≥n a: $email');

      await _auth.sendPasswordResetEmail(email: email.trim());
      print('‚úÖ Email de recuperaci√≥n enviado exitosamente');
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error enviando email de recuperaci√≥n: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al enviar email de recuperaci√≥n';
      print('‚ùå Error inesperado enviando email: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    }
  }

  // Verificar email del usuario actual
  Future<void> sendEmailVerification() async {
    try {
      if (_auth.currentUser == null) {
        throw Exception('No hay usuario logueado');
      }

      if (_auth.currentUser!.emailVerified) {
        print('‚ÑπÔ∏è Email ya est√° verificado');
        return;
      }

      print('üîÑ Enviando verificaci√≥n de email...');
      await _auth.currentUser!.sendEmailVerification();
      print('‚úÖ Email de verificaci√≥n enviado');
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error enviando verificaci√≥n: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al verificar email';
      print('‚ùå Error inesperado en verificaci√≥n: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    }
  }

  // Recargar informaci√≥n del usuario
  Future<void> reloadUser() async {
    try {
      await _auth.currentUser?.reload();
      notifyListeners();
      print('‚úÖ Informaci√≥n del usuario recargada');
    } catch (e) {
      print('‚ùå Error recargando usuario: $e');
    }
  }

  // Cerrar sesi√≥n (m√©todo principal)
  Future<void> signOut() async {
    try {
      print('üîÑ Cerrando sesi√≥n...');
      await _auth.signOut();
      _clearError();
      print('‚úÖ Sesi√≥n cerrada exitosamente');
      notifyListeners();
    } catch (e) {
      _errorMessage = 'Error al cerrar sesi√≥n';
      print('‚ùå Error cerrando sesi√≥n: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    }
  }

  // Alias para logout (compatibilidad con main.dart)
  Future<void> logout() async => await signOut();

  // Eliminar cuenta del usuario
  Future<void> deleteAccount() async {
    try {
      if (_auth.currentUser == null) {
        throw Exception('No hay usuario logueado');
      }

      print('üîÑ Eliminando cuenta de usuario...');
      await _auth.currentUser!.delete();
      _clearError();
      print('‚úÖ Cuenta eliminada exitosamente');
      notifyListeners();
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error eliminando cuenta: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al eliminar cuenta';
      print('‚ùå Error inesperado eliminando cuenta: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    }
  }

  // Actualizar perfil del usuario
  Future<void> updateProfile({String? displayName, String? photoURL}) async {
    try {
      if (_auth.currentUser == null) {
        throw Exception('No hay usuario logueado');
      }

      print('üîÑ Actualizando perfil del usuario...');
      await _auth.currentUser!.updateDisplayName(displayName);
      if (photoURL != null) {
        await _auth.currentUser!.updatePhotoURL(photoURL);
      }

      await reloadUser();
      print('‚úÖ Perfil actualizado exitosamente');
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error actualizando perfil: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al actualizar perfil';
      print('‚ùå Error inesperado actualizando perfil: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    }
  }

  // Cambiar contrase√±a
  Future<void> changePassword(String newPassword) async {
    try {
      if (_auth.currentUser == null) {
        throw Exception('No hay usuario logueado');
      }

      print('üîÑ Cambiando contrase√±a...');
      await _auth.currentUser!.updatePassword(newPassword);
      print('‚úÖ Contrase√±a cambiada exitosamente');
    } on FirebaseAuthException catch (e) {
      final errorMsg = _getFirebaseErrorMessage(e.code);
      _errorMessage = errorMsg;
      print('‚ùå Error cambiando contrase√±a: ${e.code} - $errorMsg');
      notifyListeners();
      throw Exception(errorMsg);
    } catch (e) {
      _errorMessage = 'Error inesperado al cambiar contrase√±a';
      print('‚ùå Error inesperado cambiando contrase√±a: $e');
      notifyListeners();
      throw Exception(_errorMessage);
    }
  }

  // Limpiar error manualmente (√∫til para UI)
  void clearError() {
    _clearError();
  }

  @override
  void dispose() {
    print('üßπ AuthService disposed');
    super.dispose();
  }
}
